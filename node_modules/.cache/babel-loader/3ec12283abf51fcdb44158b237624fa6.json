{"ast":null,"code":"var _s = $RefreshSig$();\n\nexport function validateEmail(email) {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\nexport function Form() {\n  _s();\n\n  // Create state variables for the fields in the form\n  // We are also setting their initial values to an empty string\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [message, setMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleInputChange = e => {\n    // Getting the value and name of the input which triggered the change\n    const {\n      target\n    } = e;\n    const inputType = target.name;\n    const inputValue = target.value; // Based on the input type, we set the state of either email, username, and password\n\n    if (inputType === 'email') {\n      setEmail(inputValue);\n    } else if (inputType === 'name') {\n      setName(inputValue);\n    } else {\n      setMessage(inputValue);\n    }\n  };\n\n  const handleFormSubmit = e => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    e.preventDefault(); // First we check to see if the email is not valid\n\n    if (!validateEmail(email)) {\n      setErrorMessage('Email is invalid'); // We want to exit out of this code block if something is wrong so that the user can correct it\n\n      return;\n    } // If everything goes according to plan, we want to clear out the input after a successful registration.\n\n\n    setName('');\n    setMessage('');\n    setEmail('');\n  };\n}\n\n_s(Form, \"bU6RkskOt7Up89GqlVAWpEK/p18=\");\n\n_c = Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["validateEmail","email","re","test","String","toLowerCase","Form","setEmail","useState","name","setName","message","setMessage","errorMessage","setErrorMessage","handleInputChange","e","target","inputType","inputValue","value","handleFormSubmit","preventDefault"],"sources":["/Users/mac/bootcamp/react-portfolio/src/utils/helpers.js"],"sourcesContent":["\n\nexport function validateEmail(email) {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  }\n  \nexport function Form() {\n  // Create state variables for the fields in the form\n  // We are also setting their initial values to an empty string\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [message, setMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleInputChange = (e) => {\n    // Getting the value and name of the input which triggered the change\n    const { target } = e;\n    const inputType = target.name;\n    const inputValue = target.value;\n\n    // Based on the input type, we set the state of either email, username, and password\n    if (inputType === 'email') {\n      setEmail(inputValue);\n    } else if (inputType === 'name') {\n      setName(inputValue);\n    } else {\n      setMessage(inputValue);\n    }\n  };\n\n  const handleFormSubmit = (e) => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    e.preventDefault();\n\n    // First we check to see if the email is not valid\n    if (!validateEmail(email)) {\n      setErrorMessage('Email is invalid');\n      // We want to exit out of this code block if something is wrong so that the user can correct it\n      return;\n\n    }\n\n    \n\n    // If everything goes according to plan, we want to clear out the input after a successful registration.\n    setName('');\n    setMessage('');\n    setEmail('');\n  }}\n"],"mappings":";;AAEA,OAAO,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;EACjC,MAAMC,EAAE,GAAG,uJAAX;EACA,OAAOA,EAAE,CAACC,IAAH,CAAQC,MAAM,CAACH,KAAD,CAAN,CAAcI,WAAd,EAAR,CAAP;AACD;AAEH,OAAO,SAASC,IAAT,GAAgB;EAAA;;EACrB;EACA;EACA,MAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBC,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBF,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,EAAD,CAAtC;EACA,MAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;;EAEA,MAAMO,iBAAiB,GAAIC,CAAD,IAAO;IAC/B;IACA,MAAM;MAAEC;IAAF,IAAaD,CAAnB;IACA,MAAME,SAAS,GAAGD,MAAM,CAACR,IAAzB;IACA,MAAMU,UAAU,GAAGF,MAAM,CAACG,KAA1B,CAJ+B,CAM/B;;IACA,IAAIF,SAAS,KAAK,OAAlB,EAA2B;MACzBX,QAAQ,CAACY,UAAD,CAAR;IACD,CAFD,MAEO,IAAID,SAAS,KAAK,MAAlB,EAA0B;MAC/BR,OAAO,CAACS,UAAD,CAAP;IACD,CAFM,MAEA;MACLP,UAAU,CAACO,UAAD,CAAV;IACD;EACF,CAdD;;EAgBA,MAAME,gBAAgB,GAAIL,CAAD,IAAO;IAC9B;IACAA,CAAC,CAACM,cAAF,GAF8B,CAI9B;;IACA,IAAI,CAACtB,aAAa,CAACC,KAAD,CAAlB,EAA2B;MACzBa,eAAe,CAAC,kBAAD,CAAf,CADyB,CAEzB;;MACA;IAED,CAV6B,CAc9B;;;IACAJ,OAAO,CAAC,EAAD,CAAP;IACAE,UAAU,CAAC,EAAD,CAAV;IACAL,QAAQ,CAAC,EAAD,CAAR;EACD,CAlBD;AAkBE;;GA1CYD,I;;KAAAA,I"},"metadata":{},"sourceType":"module"}